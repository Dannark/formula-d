import { trackConfig } from "../config/trackPoints.js";
import { Track } from "../components/Track.js";
import { TrackGenerator } from "../generators/TrackGenerator.js";

// Fun√ß√£o auxiliar para criar pontos em c√≠rculo (copiada do trackPoints.js)
function createCircularPoints(centerX, centerY, radius, numPoints) {
  const points = [];
  for (let i = 0; i < numPoints; i++) {
    const angle = (i * 2 * Math.PI) / numPoints;
    const x = centerX + radius * Math.cos(angle);
    const y = centerY + radius * Math.sin(angle);
    points.push({ x, y });
  }
  return points;
}

// Refer√™ncia para a entidade da pista (ser√° definida quando dispon√≠vel)
let trackEntity = null;

// Inst√¢ncia do gerador de pistas
const generator = new TrackGenerator();

// Fun√ß√£o para registrar a entidade da pista
function registerTrackEntity(entity) {
  trackEntity = entity;
  console.log('üéØ Entidade da pista registrada no sistema de debug');
}

// Fun√ß√£o para atualizar tanto o config quanto a entidade
function updateTrackPoints(newPoints) {
  // Atualiza o config
  trackConfig.points = newPoints;
  
  // Atualiza a entidade se ela estiver dispon√≠vel
  if (trackEntity) {
    trackEntity.getComponent(Track).points = newPoints;
  } else {
    console.log('‚ö†Ô∏è Entidade da pista n√£o encontrada - apenas config atualizado');
    console.log('üí° Dica: Recarregue a p√°gina para ver as mudan√ßas');
  }
}

// Fun√ß√£o global para gerar novo mapa circular via console
function generateCircularTrack(numPoints = 12, radiusPercent = 0.25) {
  console.log(`üèÅ Gerando nova pista circular:`);
  console.log(`   - Pontos: ${numPoints}`);
  console.log(`   - Raio: ${radiusPercent * 100}% da tela`);
  
  const centerX = window.innerWidth / 2;
  const centerY = window.innerHeight / 2;
  const radius = Math.min(window.innerWidth, window.innerHeight) * radiusPercent;
  
  const newPoints = createCircularPoints(centerX, centerY, radius, numPoints);
  
  // Atualiza tanto o config quanto a entidade
  updateTrackPoints(newPoints);
  
  console.log(`‚úÖ Nova pista gerada com ${newPoints.length} pontos`);
  console.log(`   - Centro: (${centerX}, ${centerY})`);
  console.log(`   - Raio: ${radius}px`);
  
  return newPoints;
}

// Fun√ß√£o para obter informa√ß√µes da pista atual
function getTrackInfo() {
  console.log(`üìä Informa√ß√µes da pista atual:`);
  console.log(`   - Pontos: ${trackConfig.points.length}`);
  console.log(`   - Largura: ${trackConfig.trackWidth}px`);
  console.log(`   - Dist√¢ncia m√°xima: ${trackConfig.maxPointDistance}px`);
  console.log(`   - Dist√¢ncia m√≠nima: ${trackConfig.minPointDistance}px`);
  console.log(`   - Entidade registrada: ${trackEntity ? 'Sim' : 'N√£o'}`);
  console.log('üìç Pontos da pista:', trackConfig.points);
  
  return trackConfig;
}

// Fun√ß√£o para resetar para a pista padr√£o
function resetToDefaultTrack() {
  console.log('üîÑ Resetando para pista padr√£o...');
  
  const defaultPoints = createCircularPoints(
    window.innerWidth / 2,
    window.innerHeight / 2,
    Math.min(window.innerWidth, window.innerHeight) * 0.25,
    12
  );
  
  updateTrackPoints(defaultPoints);
  
  console.log('‚úÖ Pista resetada para configura√ß√£o padr√£o');
  
  return defaultPoints;
}

// === FUN√á√ïES DE GERA√á√ÉO SKELETON (NOVO) ===

// Gera pista usando algoritmo skeleton (recomendado para evitar auto-intersec√ß√µes)
function generateSkeletonTrack(type = 'balanced', options = {}) {
  console.log(`ü¶¥ Gerando pista skeleton tipo "${type}"...`);
  
  const defaultOptions = {
    segments: 12,
    complexity: 0.5,
    pointDensity: 100,
    maxRadius: Math.min(window.innerWidth, window.innerHeight) * 0.3,
    ...options
  };
  
  const newPoints = generator.generatePresetSkeletonTrack(type, defaultOptions);
  
  if (newPoints && newPoints.length > 0) {
    updateTrackPoints(newPoints);
    console.log(`‚úÖ Pista skeleton "${type}" gerada com ${newPoints.length} pontos`);
  } else {
    console.log(`‚ùå Falha ao gerar pista skeleton "${type}"`);
  }
  
  return newPoints;
}

// Gera pista skeleton simples
function generateSkeletonSimple(options = {}) {
  return generateSkeletonTrack('simple', options);
}

// Gera pista skeleton balanceada (padr√£o)
function generateSkeletonBalanced(options = {}) {
  return generateSkeletonTrack('balanced', options);
}

// Gera pista skeleton complexa
function generateSkeletonComplex(options = {}) {
  return generateSkeletonTrack('complex', options);
}

// Gera pista skeleton org√¢nica
function generateSkeletonOrganic(options = {}) {
  return generateSkeletonTrack('organic', options);
}

// Gera pista com crit√©rios de qualidade espec√≠ficos
function generateQualityTrack(criteria = {}) {
  console.log('üéØ Gerando pista com crit√©rios de qualidade...');
  
  const defaultCriteria = {
    minLength: 10,
    maxLength: 20,
    minComplexity: 0.3,
    maxComplexity: 0.6,
    preferredAlgorithm: 'skeleton',
    maxAttempts: 5,
    ...criteria
  };
  
  const newPoints = generator.generateQualityTrack(defaultCriteria);
  
  if (newPoints && newPoints.length > 0) {
    updateTrackPoints(newPoints);
    console.log(`‚úÖ Pista de qualidade gerada com ${newPoints.length} pontos`);
  } else {
    console.log('‚ùå Falha ao gerar pista de qualidade');
  }
  
  return newPoints;
}

// Gera automaticamente a melhor pista poss√≠vel (novo algoritmo inteligente)
function generateAutoTrack(options = {}) {
  console.log('ü§ñ Gerando pista automaticamente (sistema inteligente)...');
  
  const defaultOptions = {
    preferSkeleton: true,
    preferDirectional: false,
    algorithm: 'auto',
    maxAttempts: 3,
    ...options
  };
  
  const newPoints = generator.generateBestTrack(defaultOptions);
  
  if (newPoints && newPoints.length > 0) {
    updateTrackPoints(newPoints);
    console.log(`‚úÖ Pista autom√°tica gerada com ${newPoints.length} pontos`);
  } else {
    console.log('‚ùå Falha ao gerar pista autom√°tica');
  }
  
  return newPoints;
}

// === FUN√á√ïES DE GERA√á√ÉO PROCEDURAL ===

// Gera pista direcional inteligente DIRETO (sem sistema de avalia√ß√£o)
function generateDirectionalTrack(options = {}) {
  console.log('üéØ Gerando pista direcional diretamente...');
  
  const defaultOptions = {
    stepSize: 100,
    maxSteps: 30,
    turnAngle: Math.PI / 4,
    returnPhaseRatio: 0.6,
    minCircuitDistance: 60,
    clockwise: true, // Dire√ß√£o hor√°ria por padr√£o
    maxDistanceFromCenter: 0.8, // Permite pistas at√© 80% da tela do centro
    ...options
  };
  
  // Chama diretamente o gerador sem passar pelo sistema de avalia√ß√£o
  const newPoints = generator.directionalGenerator.generateSafeDirectionalTrack(defaultOptions);
  
  if (newPoints && newPoints.length > 0) {
    updateTrackPoints(newPoints);
    console.log(`‚úÖ Pista direcional gerada com ${newPoints.length} pontos`);
  } else {
    console.log('‚ùå Falha ao gerar pista direcional');
  }
  
  return newPoints;
}

// Gera pista direcional SIMPLES (uma √∫nica tentativa)
function generateSimpleDirectionalTrack(options = {}) {
  console.log('‚ö° Gerando pista direcional simples (1 tentativa)...');
  
  const defaultOptions = {
    stepSize: 100,
    maxSteps: 60,
    turnAngle: Math.PI / 4,
    returnPhaseRatio: 0.6,
    minCircuitDistance: 60,
    clockwise: true,
    maxDistanceFromCenter: 0.8,
    ...options
  };
  
  // Chama apenas uma vez, sem m√∫ltiplas tentativas
  const newPoints = generator.directionalGenerator.generateDirectionalTrack(defaultOptions);
  
  if (newPoints && newPoints.length > 0) {
    updateTrackPoints(newPoints);
    console.log(`‚úÖ Pista direcional simples gerada com ${newPoints.length} pontos`);
  } else {
    console.log('‚ùå Falha ao gerar pista direcional simples');
  }
  
  return newPoints;
}

// Gera pista inteligente (testa m√∫ltiplos geradores) - MELHORADO
function generateBestTrack(options = {}) {
  console.log('üèÜ Gerando melhor pista poss√≠vel (sistema aprimorado)...');
  
  const defaultOptions = {
    preferDirectional: true,
    preferSkeleton: false,
    algorithm: 'auto',
    maxAttempts: 3,
    ...options
  };
  
  const newPoints = generator.generateBestTrack(defaultOptions);
  
  if (newPoints && newPoints.length > 0) {
    updateTrackPoints(newPoints);
    console.log(`‚úÖ Melhor pista gerada com ${newPoints.length} pontos`);
  } else {
    console.log('‚ùå Falha ao gerar melhor pista');
  }
  
  return newPoints;
}

// Gera pista org√¢nica com Perlin Noise
function generateOrganicTrack(options = {}) {
  console.log('üåø Gerando pista org√¢nica com Perlin Noise...');
  
  const defaultOptions = {
    numPoints: 16,
    baseRadius: Math.min(window.innerWidth, window.innerHeight) * 0.25,
    noiseAmplitude: 0.3,
    complexity: 1.0
  };
  
  const finalOptions = { ...defaultOptions, ...options };
  const newPoints = generator.generateSafeTrack('organic', finalOptions);
  
  updateTrackPoints(newPoints);
  
  console.log(`‚úÖ Pista org√¢nica gerada com ${newPoints.length} pontos`);
  
  return newPoints;
}

// Gera pista oval com perturba√ß√µes
function generateOvalTrack(options = {}) {
  console.log('üèÅ Gerando pista oval com perturba√ß√µes...');
  
  const defaultOptions = {
    numPoints: 20,
    radiusX: Math.min(window.innerWidth, window.innerHeight) * 0.3,
    radiusY: Math.min(window.innerWidth, window.innerHeight) * 0.2,
    noiseAmplitude: 0.2
  };
  
  const finalOptions = { ...defaultOptions, ...options };
  const newPoints = generator.generateSafeTrack('oval', finalOptions);
  
  updateTrackPoints(newPoints);
  
  console.log(`‚úÖ Pista oval gerada com ${newPoints.length} pontos`);
  
  return newPoints;
}

// Gera pista em forma de 8
function generateFigureEightTrack(options = {}) {
  console.log('‚àû Gerando pista em forma de 8...');
  
  const defaultOptions = {
    numPoints: 24,
    lobeRadius: Math.min(window.innerWidth, window.innerHeight) * 0.15,
    noiseAmplitude: 0.25
  };
  
  const finalOptions = { ...defaultOptions, ...options };
  const newPoints = generator.generateSafeTrack('figure8', finalOptions);
  
  updateTrackPoints(newPoints);
  
  console.log(`‚úÖ Pista figura-8 gerada com ${newPoints.length} pontos`);
  
  return newPoints;
}

// Gera pista complexa com m√∫ltiplas se√ß√µes
function generateComplexTrack(options = {}) {
  console.log('üèéÔ∏è Gerando pista complexa...');
  
  const defaultOptions = {
    numPoints: 20,
    sections: 3,
    noiseAmplitude: 0.4,
    baseRadius: Math.min(window.innerWidth, window.innerHeight) * 0.25
  };
  
  const finalOptions = { ...defaultOptions, ...options };
  const newPoints = generator.generateSafeTrack('complex', finalOptions);
  
  updateTrackPoints(newPoints);
  
  console.log(`‚úÖ Pista complexa gerada com ${newPoints.length} pontos`);
  
  return newPoints;
}

// Gera pista randomizada (escolhe tipo aleat√≥rio)
function generateRandomTrack(options = {}) {
  console.log('üé≤ Gerando pista completamente aleat√≥ria...');
  
  // Op√ß√µes randomizadas
  const baseSize = Math.min(window.innerWidth, window.innerHeight);
  const randomOptions = {
    numPoints: 12 + Math.floor(Math.random() * 16), // 12-28 pontos
    baseRadius: baseSize * (0.2 + Math.random() * 0.2), // 20-40% da tela
    noiseAmplitude: 0.2 + Math.random() * 0.3, // 0.2-0.5
    complexity: 0.5 + Math.random() * 1.5, // 0.5-2.0
    stepSize: 30 + Math.random() * 20, // 30-50 para pistas direcionais
    maxSteps: 20 + Math.floor(Math.random() * 20), // 20-40 passos
    ...options
  };
  
  const newPoints = generator.generateRandomTrack(randomOptions);
  
  if (newPoints && newPoints.length > 0) {
    updateTrackPoints(newPoints);
    console.log(`‚úÖ Pista aleat√≥ria gerada com ${newPoints.length} pontos`);
  } else {
    console.log('‚ùå Falha ao gerar pista aleat√≥ria');
  }
  
  return newPoints;
}

// Testa todos os algoritmos novos (incluindo skeleton)
async function testAllNewAlgorithms() {
  console.log('üß™ Testando todos os algoritmos novos...');
  
  const algorithms = [
    { name: 'Skeleton Simple', func: () => generateSkeletonSimple() },
    { name: 'Skeleton Balanced', func: () => generateSkeletonBalanced() },
    { name: 'Skeleton Complex', func: () => generateSkeletonComplex() },
    { name: 'Skeleton Organic', func: () => generateSkeletonOrganic() },
    { name: 'Direcional Melhorado', func: () => generateDirectionalTrack() },
    { name: 'Qualidade Alta', func: () => generateQualityTrack() },
    { name: 'Autom√°tico', func: () => generateAutoTrack() }
  ];
  
  for (const algo of algorithms) {
    console.log(`\n--- Testando: ${algo.name} ---`);
    try {
      algo.func();
      console.log(`‚úÖ ${algo.name} executado com sucesso`);
    } catch (error) {
      console.error(`‚ùå Erro em ${algo.name}: ${error.message}`);
    }
    // Pequena pausa para ver os resultados
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüéâ Teste de todos os algoritmos conclu√≠do!');
}

// Fun√ß√£o de ajuda para mostrar como usar as fun√ß√µes
function trackHelp() {
  console.log(`
üèÅ === FORMULA-D TRACK DEBUG SYSTEM === üèÅ

üìã Fun√ß√µes dispon√≠veis no console:

=== GERA√á√ÉO B√ÅSICA ===
üéØ generateCircularTrack(numPoints, radiusPercent)
   - Gera uma nova pista circular simples
   
   Exemplos:
   generateCircularTrack()           // Pista padr√£o
   generateCircularTrack(8, 0.3)     // 8 pontos, 30% da tela

=== ALGORITMOS SKELETON (NOVO - RECOMENDADO) ===
ü¶¥ generateSkeletonSimple(options)
   - Pista skeleton simples (8 segmentos, baixa complexidade)
   
ü¶¥ generateSkeletonBalanced(options)
   - Pista skeleton balanceada (12 segmentos, complexidade m√©dia) ‚≠ê RECOMENDADO
   
ü¶¥ generateSkeletonComplex(options)
   - Pista skeleton complexa (16 segmentos, alta complexidade)
   
ü¶¥ generateSkeletonOrganic(options)
   - Pista skeleton org√¢nica (20 segmentos, varia√ß√£o natural)
   
üéØ generateQualityTrack(criteria)
   - Gera com crit√©rios espec√≠ficos de qualidade
   - criteria: minLength, maxLength, minComplexity, maxComplexity, preferredAlgorithm
   
ü§ñ generateAutoTrack(options)
   - Sistema inteligente escolhe automaticamente o melhor algoritmo

=== GERA√á√ÉO DIRECIONAL (MELHORADO) ===
üéØ generateDirectionalTrack(options)
   - Pista direcional com detec√ß√£o de colis√£o aprimorada
   - options: stepSize, maxSteps, turnAngle, returnPhaseRatio, clockwise
   
‚ö° generateSimpleDirectionalTrack(options)
   - Vers√£o mais r√°pida (1 tentativa apenas)
   
üèÜ generateBestTrack(options)
   - Testa m√∫ltiplos algoritmos e escolhe o melhor
   - options: preferDirectional, preferSkeleton, algorithm, maxAttempts

=== GERA√á√ÉO PERLIN NOISE ===
üåø generateOrganicTrack(options)
   - Pista circular com perturba√ß√µes org√¢nicas
   
üèÅ generateOvalTrack(options)
   - Pista oval com varia√ß√µes naturais
   
‚àû generateFigureEightTrack(options)
   - Pista em forma de 8 com perturba√ß√µes
   
üèéÔ∏è generateComplexTrack(options)
   - Pista complexa com m√∫ltiplas se√ß√µes
   
üé≤ generateRandomTrack(options)
   - Gera pista totalmente randomizada

=== TESTES E UTILIT√ÅRIOS ===
üß™ testAllNewAlgorithms()
   - Testa todos os novos algoritmos sequencialmente
   
üìä getTrackInfo()
   - Mostra informa√ß√µes da pista atual
   
üîÑ resetToDefaultTrack()
   - Volta para a pista padr√£o
   
‚ùì trackHelp()
   - Mostra esta ajuda

=== EXEMPLOS DE USO ===

üèÜ Para resolver problemas de auto-intersec√ß√£o:
generateSkeletonBalanced()          // ‚≠ê MELHOR para evitar sobreposi√ß√µes
generateAutoTrack()                 // Sistema inteligente
generateQualityTrack()              // Com crit√©rios espec√≠ficos

üéØ Para experimentar:
generateDirectionalTrack()          // Seu algoritmo original melhorado
generateSkeletonComplex()           // Pistas mais desafiadoras
testAllNewAlgorithms()              // Testa tudo sequencialmente

üîß Configura√ß√µes avan√ßadas:
generateSkeletonBalanced({ segments: 16, complexity: 0.7 })
generateQualityTrack({ minLength: 15, preferredAlgorithm: 'skeleton' })
generateAutoTrack({ preferSkeleton: true })
generateDirectionalTrack({ stepSize: 80, explorationSteps: 15 })

üí° RECOMENDA√á√ÉO: Use generateSkeletonBalanced() para resolver problemas de sobreposi√ß√£o!
üéÆ Todas as mudan√ßas s√£o aplicadas instantaneamente na tela.
  `);
}

function generateCustomTrack(options = {}) {
  console.log('üéØ Gerando pista CUSTOMIZADA...');
  
  const defaultOptions = {
    stepSize: 100,
    explorationSteps: 10,
    straightStartSteps: 6,
    ...options
  };
  
  // Chama diretamente o gerador sem passar pelo sistema de avalia√ß√£o
  const newPoints = generator.customGenerator.generateDirectionalTrack(defaultOptions);
  
  if (newPoints && newPoints.length > 0) {
    updateTrackPoints(newPoints);
    console.log(`‚úÖ Pista direcional gerada com ${newPoints.length} pontos`);
  } else {
    console.log('‚ùå Falha ao gerar pista direcional');
  }
  
  return newPoints;
}

// Exp√µe as fun√ß√µes globalmente no console
window.generateCircularTrack = generateCircularTrack;
window.generateDirectionalTrack = generateDirectionalTrack;
window.generateSimpleDirectionalTrack = generateSimpleDirectionalTrack;
window.generateBestTrack = generateBestTrack;
window.generateOrganicTrack = generateOrganicTrack;
window.generateOvalTrack = generateOvalTrack;
window.generateFigureEightTrack = generateFigureEightTrack;
window.generateComplexTrack = generateComplexTrack;
window.generateRandomTrack = generateRandomTrack;
window.generateCustomTrack = generateCustomTrack;
// Novas fun√ß√µes skeleton
window.generateSkeletonTrack = generateSkeletonTrack;
window.generateSkeletonSimple = generateSkeletonSimple;
window.generateSkeletonBalanced = generateSkeletonBalanced;
window.generateSkeletonComplex = generateSkeletonComplex;
window.generateSkeletonOrganic = generateSkeletonOrganic;
window.generateQualityTrack = generateQualityTrack;
window.generateAutoTrack = generateAutoTrack;
window.testAllNewAlgorithms = testAllNewAlgorithms;
// Utilit√°rios
window.getTrackInfo = getTrackInfo;
window.resetToDefaultTrack = resetToDefaultTrack;
window.trackHelp = trackHelp;

// Fun√ß√£o interna para registrar entidade (n√£o exposta globalmente)
window.__registerTrackEntity = registerTrackEntity;

// Mostra a ajuda quando o arquivo √© carregado
console.log('üèÅ Formula-D Track Debug System carregado!');
console.log('ü¶¥ NOVO: Sistema Skeleton - elimina auto-intersec√ß√µes!');
console.log('üéØ Sistema direcional com detec√ß√£o de colis√£o aprimorada!');
console.log('ü§ñ Sistema inteligente de sele√ß√£o autom√°tica de algoritmos!');
console.log('üí° Digite trackHelp() no console para ver todas as fun√ß√µes dispon√≠veis.');
console.log('‚≠ê RECOMENDADO: generateSkeletonBalanced() - resolve problemas de sobreposi√ß√£o!');

export { registerTrackEntity }; 