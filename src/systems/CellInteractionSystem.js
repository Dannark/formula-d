import { Track } from "../components/Track.js";
import { Camera } from "../components/Camera.js";
import { Transform } from "../components/Transform.js";
import { TrackHelper } from "./track/TrackHelper.js";

export class CellInteractionSystem {
  constructor(canvas) {
    this.canvas = canvas;
    this.cameraEntity = null;
    this.trackEntity = null;
    this.isEnabled = true;
    
    console.log("üñ±Ô∏è Sistema de intera√ß√£o com c√©lulas inicializado");
    this.setupEventListeners();
  }

  setupEventListeners() {
    this.canvas.addEventListener("click", (e) => {
      if (!this.isEnabled) return;
      
      this.handleCellClick(e);
    });
  }

  handleCellClick(e) {
    // N√£o faz nada se n√£o temos entidades necess√°rias
    if (!this.trackEntity || !this.cameraEntity) {
      console.log("üö´ Entidades n√£o encontradas:", { 
        trackEntity: !!this.trackEntity, 
        cameraEntity: !!this.cameraEntity 
      });
      return;
    }

    const rect = this.canvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;

    // Converte coordenadas da tela para coordenadas do mundo
    const worldCoords = this.screenToWorld(mouseX, mouseY);
    
    // Busca a c√©lula mais pr√≥xima do clique
    const track = this.trackEntity.getComponent(Track);
    
    const cellInfo = TrackHelper.findNearestCell(
      track.trackCells, 
      worldCoords.x, 
      worldCoords.y, 
      50 // Dist√¢ncia m√°xima de 50 pixels
    );

    if (cellInfo) {
      this.logCellClick(cellInfo, worldCoords);
    } else {
      console.log("üñ±Ô∏è Clique fora de qualquer c√©lula");
    }
  }

  logCellClick(cellInfo, worldCoords) {
    const { cell, type, distance, exactMatch } = cellInfo;
    
    const matchType = exactMatch ? "üéØ CLIQUE EXATO" : "üìç CLIQUE PR√ìXIMO";
    const matchIcon = exactMatch ? "üéØ" : "üìç";
    
    // Seleciona a c√©lula clicada
    this.selectCell(type, cell.index);
    
    console.log(`${matchType} NA C√âLULA:`, {
      tipo: type.toUpperCase(),
      indice: cell.index,
      tipoMatch: exactMatch ? "Dentro da c√©lula" : `Pr√≥ximo (${Math.round(distance)}px)`,
      posicao: {
        centerX: Math.round(cell.centerX),
        centerY: Math.round(cell.centerY)
      },
      ocupacao: {
        ocupada: !TrackHelper.isCellFree(cell),
        ocupadaPor: cell.occupiedBy || "Livre"
      },
      curva: {
        anguloRadianos: cell.curveAngle?.toFixed(4),
        anguloGraus: cell.curveAngle ? TrackHelper.radiansToDegrees(cell.curveAngle).toFixed(2) + "¬∞" : "N/A"
      },
      coordenadasDoClique: {
        x: Math.round(worldCoords.x),
        y: Math.round(worldCoords.y)
      }
    });

    // Log resumido mais limpo
    const status = cell.occupiedBy ? `Ocupada por jogador ${cell.occupiedBy}` : "Livre";
    const precision = exactMatch ? "EXATO" : "PR√ìXIMO";
    console.log(`${matchIcon} C√©lula ${type} #${cell.index} (${status}) - ${precision} - ‚ú® SELECIONADA`);
  }

  // Seleciona uma c√©lula espec√≠fica
  selectCell(type, index) {
    if (!this.trackEntity) return;
    
    const track = this.trackEntity.getComponent(Track);
    const previousSelection = track.selectedCellId;
    
    // Atualiza a sele√ß√£o
    track.selectedCellId = { type, index };
    
    // Log da mudan√ßa de sele√ß√£o
    if (previousSelection) {
      console.log(`üîÑ Sele√ß√£o mudou: ${previousSelection.type}[${previousSelection.index}] ‚Üí ${type}[${index}]`);
    } else {
      console.log(`‚ú® Primeira sele√ß√£o: ${type}[${index}]`);
    }
  }

  // Desseleciona a c√©lula atual
  deselectCell() {
    if (!this.trackEntity) return;
    
    const track = this.trackEntity.getComponent(Track);
    if (track.selectedCellId) {
      console.log(`‚ùå Desselecionando c√©lula: ${track.selectedCellId.type}[${track.selectedCellId.index}]`);
      track.selectedCellId = null;
    }
  }

  // Verifica se uma c√©lula est√° selecionada
  isCellSelected(type, index) {
    if (!this.trackEntity) return false;
    
    const track = this.trackEntity.getComponent(Track);
    return track.selectedCellId && 
           track.selectedCellId.type === type && 
           track.selectedCellId.index === index;
  }

  // Obt√©m a c√©lula atualmente selecionada
  getSelectedCell() {
    if (!this.trackEntity) return null;
    
    const track = this.trackEntity.getComponent(Track);
    return track.selectedCellId;
  }

  screenToWorld(screenX, screenY) {
    // Se n√£o h√° c√¢mera, retorna coordenadas da tela
    if (!this.cameraEntity) {
      console.log("‚ö†Ô∏è Usando coordenadas da tela (sem c√¢mera)");
      return { x: screenX, y: screenY };
    }

    const camera = this.cameraEntity.getComponent(Camera);
    const transform = this.cameraEntity.getComponent(Transform);
    
    // Se n√£o conseguiu obter componentes da c√¢mera, usa coordenadas da tela
    if (!camera || !transform) {
      console.log("‚ö†Ô∏è Usando coordenadas da tela (componentes n√£o encontrados)");
      return { x: screenX, y: screenY };
    }

    // CORRE√á√ÉO: Usa exatamente a mesma l√≥gica do CameraControlSystem
    const worldX = (screenX / camera.zoom) + transform.x;
    const worldY = (screenY / camera.zoom) + transform.y;

    return { x: worldX, y: worldY };
  }

  update(deltaTime, entities) {
    // Encontra as entidades necess√°rias
    for (const entity of entities) {
      if (entity.hasComponent(Track) && !this.trackEntity) {
        this.trackEntity = entity;
        console.log("üéØ Entidade da pista encontrada pelo sistema de intera√ß√£o");
      }
      
      if (entity.hasComponent(Camera) && !this.cameraEntity) {
        this.cameraEntity = entity;
        console.log("üì∑ Entidade da c√¢mera encontrada pelo sistema de intera√ß√£o");
      }
    }
  }

  // Habilita/desabilita o sistema
  setEnabled(enabled) {
    this.isEnabled = enabled;
    console.log(`üñ±Ô∏è Sistema de intera√ß√£o com c√©lulas ${enabled ? 'habilitado' : 'desabilitado'}`);
  }

  // Obt√©m informa√ß√µes da c√©lula em uma posi√ß√£o espec√≠fica
  getCellAtPosition(x, y, maxDistance = 50) {
    if (!this.trackEntity) return null;
    
    const track = this.trackEntity.getComponent(Track);
    return TrackHelper.findNearestCell(track.trackCells, x, y, maxDistance);
  }
} 